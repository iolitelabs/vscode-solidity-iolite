{
    "fileTypes": [
        "sol"
    ],
    "name": "Solidity",
    "patterns": [
        { "include": "#comment" },
        { "include": "#number" },
        { "include": "#string" },
        { "include": "#function" },
        { "include": "#event" },
        { "include": "#enum" },
        {
            "captures": {
                "2": {
                    "name": "entity.name.function"
                },
                "3": {
                    "name": "entity.name.function"
                }
            },
            "comment": "Main keywords",
            "match": "\\b(pragma|contract|interface|struct|library|enum|assembly)\\s+([A-Za-z_]\\w*)(?:\\s+is\\s+((?:[A-Za-z_][\\,\\s]*)*))?\\b",
            "name": "keyword.control"
        },
        {
            "captures": {
                "1": {
                    "name": "constant.language"
                },
                "2": {
                    "name": "variable.parameter"
                }
            },
            "comment": "Built-in types",
            "match": "\\b(address|string\\d*|bytes\\d*|int\\d*|uint\\d*|bool|hash\\d*)(?:\\s+(?:indexed\\s+)?([A-Za-z_]\\w*)\\s*[,\\)])?\\b"
        },
        {
            "captures": {
                "1": {
                    "name": "constant.language"
                },
                "2": {
                    "name": "constant.language"
                },
                "3": {
                    "name": "constant.language"
                },
                "4": {
                    "name": "keyword.control"
                }
            },
            "comment": "Mapping definition",
            "match": "\\b(mapping)\\s*\\((.*)\\s+=>\\s+(.*)\\)(\\s+(?:private|public|external|internal|inherited))?\\s+([A-Za-z_]\\w*)\\b"
        },
        {
            "comment": "True and false keywords",
            "match": "\\b(true|false)\\b",
            "name": "constant.language"
        },
        {
            "comment": "Langauge keywords",
            "match": "\\b(emit|var|import|function|enum|constant|pure|view|payable|nonpayable|if|else|for|while|do|break|continue|throw|returns?|private|public|external|internal|inherited|storage|delete|memory|this|suicide|let|new|is|ether|wei|finney|szabo|seconds|minutes|hours|days|weeks|years\\_)\\b",
            "name": "keyword.control"
        },
        {
            "captures": {
                "1": {
                    "name": "constant.language"
                },
                "2": {
                    "name": "keyword.control"
                }
            },
            "comment": "Variable definitions",
            "match": "\\b([A-Za-z_]\\w+)(\\s+(?:private|public|internal|external|inherited))?\\s+([A-Za-z_]\\w*)\\;"
        },
        {
            "comment": "Operators",
            "match": "(=|!|>|<|\\||&)",
            "name": "keyword.control"
        },
        {
            "captures": {
                "1": {
                    "name": "constant.language"
                },
                "2": {
                    "name": "constant.language"
                }
            },
            "comment": "msg and block special usage",
            "match": "\\b(msg|block|tx)\\.([A-Za-z_]\\w*)\\b"
        }
    ],
    "repository": {
        "comment": {
            "patterns": [
                { "include": "#comment-line" },
                { "include": "#comment-block" }
            ]
        },
        "comment-line": {
            "match": "(?<!tp:)//.*?$",
            "name": "comment.line.solidity"
        },
        "comment-block": {
            "begin": "/\\*",
            "end": "\\*/",
            "name": "comment.block.solidity"
        },
        "number": {
            "patterns": [
                { "include": "#number-decimal" },
                { "include": "#number-hex" }
            ]
        },
        "number-decimal": {
            "match": "\\b(\\d+)\\b",
            "name": "constant.numeric.decimal.solidity"
        },
        "number-hex": {
            "match": "\\b(0[xX][a-fA-F0-9]+)\\b",
            "name": "constant.numeric.hexadecimal.solidity"
        },
        "string": {
            "patterns": [
                {
                    "match": "\\\".*\\\"",
                    "name": "string.quoted.double.solidity"
                },
                {
                    "match": "\\'.*\\'",
                    "name": "string.quoted.single.solidity"
                }
            ]
        },
        "function": {
            "patterns": [
                { "include": "#function-definition" },
                { "include": "#function-call" }
            ]
        },
        "function-definition": {
            "match": "\\b(function|modifier)\\s+([A-Za-z_]\\w+)\\s*\\(",
            "captures": {
                "1": { "name": "storage.type.function.solidity" },
                "2": { "name": "entity.name.function.solidity" }
            }
        },
        "function-call": {
            "match": "\\b([A-Za-z_]\\w*)\\s*\\(",
            "captures": {
                "1": { "name": "entity.name.function.solidity" }
            }
        },
        "event": {
            "patterns": [
                { "include": "#keyword-event" },
                { "include": "#keyword-emit" }
            ]
        },
        "keyword-event": {
            "match": "\\b(event)\\b",
            "name": "storage.type.event.solidity"
        },
        "keyword-emit": {
            "match": "\\b(emit)\\b",
            "name": "keyword.control.emit.solidity"
        },
        "enum": {
            "match": "\\b(enum)(?:\\s+([A-Za-z_]\\w*))?\\b",
            "captures": {
                "1": { "name": "storage.type.enum.solidity" },
                "2": { "name": "entity.name.type.enum.solidity" }
            }
        }
    },
    "scopeName": "source.solidity",
    "uuid": "ad87d2cd-8575-4afe-984e-9421a3788933"
}
